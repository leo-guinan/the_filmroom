{
  "$schema": "https://flightcontrol.dev/schema.json",
  "environments": [
    {
      "id": "production",
      "name": "Production Environment", 
      "region": "us-east-1",
      "source": {
        "branch": "main"
      },
      "services": [
        {
          "id": "postgres",
          "name": "PostgreSQL Database",
          "type": "rds",
          "engine": "postgres",
          "engineVersion": "16",
          "instanceSize": "db.t4g.micro",
          "storage": 20,
          "private": true,
          "deletionProtection": false
        },
        {
          "id": "backend",
          "name": "Backend API",
          "type": "web",
          "buildType": "nixpacks",
          "source": {
            "path": "/"
          },
          "target": {
            "type": "fargate"
          },
          "ci": {
            "type": "ec2"
          },
          "cpu": 0.5,
          "memory": 2,
          "port": 8000,
          "healthCheckPath": "/health",
          "buildCommand": "cd backend && /opt/venv/bin/pip install -e .",
          "startCommand": "cd backend && /opt/venv/bin/uvicorn src.main:app --host 0.0.0.0 --port 8000",
          "minInstances": 1,
          "maxInstances": 3,
          "environmentVariables": {
            "DATABASE_URL": {
              "fromService": {
                "id": "postgres",
                "value": "connectionString"
              }
            },
            "APP_ENV": "production",
            
            "CORS_ORIGINS": {
              "fromService": {
                "id": "frontend",
                "value": "url"
              }
            }
          }
        },
        {
          "id": "frontend",
          "name": "Frontend Web App",
          "type": "web",
          "buildType": "nixpacks",
          "source": {
            "path": "/"
          },
          "target": {
            "type": "fargate"
          },
          "ci": {
            "type": "ec2"
          },
          "cpu": 0.5,
          "memory": 2,
          "port": 3000,
          "buildCommand": "pnpm install --frozen-lockfile && cd frontend && npx next build",
          "startCommand": "cd frontend && npx next start",
          "minInstances": 1,
          "maxInstances": 3,
          "environmentVariables": {
            "NEXT_PUBLIC_API_URL": {
              "fromService": {
                "id": "backend",
                "value": "url"
              }
            }
           
          }
        }
      ]
    }
  ]
}